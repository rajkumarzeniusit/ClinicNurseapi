name: .NET Build and Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.102' # Use your .NET version

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Project
        run: dotnet build --configuration Release --no-restore

      - name: Run Tests (If any)
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Publish Application
        run: dotnet publish -c Release -o ./publish

      # Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Configure Docker to use Google Container Registry (GCR)
      - name: Configure Docker to use GCR
        run: gcloud auth configure-docker us-central1-docker.pkg.dev
      - name: Build Docker Image
        run: docker build -t trudoseadminportalapi:latest .
      - name: Push Image to Artifact Registry
        run: docker push trudoseadminportalapi:latest

      # Deploy to Google Cloud VM
      - name: Deploy to Google Cloud VM
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: 35.209.150.71   # Replace with your Google Cloud instance IP
          username: trudoseinstance  # Replace with your instance username
          key: ${{ secrets.GCLOUD_SSH_PRIVATE_KEY }}
          script: |
            IMAGE_NAME=trudoseadminportalapi:latest
            CONTAINER_NAME=trudoseadminportalapi
            
            # Authenticate with Artifact Registry
            gcloud auth configure-docker us-central1-docker.pkg.dev
           
            # Stop and remove the existing container
            if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
                echo "Stopping and removing existing container..."
                docker stop $CONTAINER_NAME || true
                docker rm $CONTAINER_NAME || true
            else
                echo "Container does not exist, skipping stop and remove steps."
            fi
            
            # Pull the latest image from GCR
            docker pull $IMAGE_NAME
            
            # Run the new container
            docker run -d -p 9999:8910 --name trudoseadminportalapi $IMAGE_NAME
